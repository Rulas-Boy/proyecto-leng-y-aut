PARSER_BEGIN(test)
import java.io.PrintStream;
import java.util.ArrayList;

class test
{
    public static void main(String[] args) throws ParseException
    {
        ArrayList<String> tabla;
        tabla = new ArrayList<String>();

        try
        {
            test analizador = new test(System.in);

            //analizador.Iniciar();
            analizador.Codigo();

            System.out.println("\nLa cadena fue aceptada correctamente");
        }
        catch(ParseException e)
        {
            System.out.println(e.getMessage());

            System.out.println("Hubo un error y la cadena no fue aceptada.");
        }
    }

    public static void Mensaje()
    {
        System.out.println("MENSAJE MENSAJE MENSAJE MENSAJE");
    }
}
PARSER_END(test)

SKIP : { " " | "\t" | "\n" | "\r" }

TOKEN :
{
    <#letra: ["a"-"z","A"-"Z"]> |
    <#dig: ["0"-"9"]>
}

TOKEN:
{
    <TipoDato: "bool" | "byte" | "char" | "int" | "double" | "float" | "string" | "var"> {System.out.println("Token: TipoDato. Valor del atributo: " + image);} |
    <OperadorLog: "and" | "&&" | "||" | "or" | "xor" | "<=" | "<" | ">=" | ">" | "==" | "!=" | "not"> {System.out.println("Token: OperadorLog. Valor del atributo: " + image);} |
    <Ciclo: "for" | "foreach" | "while" | "do" | "until"> {System.out.println("Token: Ciclo. Valor del atributo: " + image);} |
    <CasoSino: "elseif" | "elsif" | "elif" | "unless"> {System.out.println("Token: DecCaso. Valor del atributo: " + image);} | // Declaracion de caso
    <Default: "default" | "else"> {System.out.println("Token: Default. Valor del atributo: " + image);} | // En caso de que no se cumpla una condición
    <Operador: "+" | "-" | "*" | "/" | "**" | "%"> {System.out.println("Token: Operador. Valor del atributo: " + image);} | // Operaciones aritméticas
    <Herencia: "extends" | "implements"> {System.out.println("Token: Herencia. Valor del atributo: " + image);} |
    <Acceso: <ArrIni> ("public" | "private" | "protected") <ArrFin>> {System.out.println("Token: Acceso. Valor del atributo: " + image);} | // Acceso de variables
    <IncDec: "++" | "--"> {System.out.println("Token: IncDec. Valor del atributo: " + image);} | // Incremento o decremento de valor
    <Booleano: "true" | "false"> {System.out.println("Token: Booleano. Valor del atributo: " + image);} |
    <Nulo: "NULL" | "null" | "nil"> {System.out.println("Token: Nulo. Valor del atributo: " + image);} |
    <Split: "split" | "explode"> {System.out.println("Token: Split. Valor del atributo: " + image);} | // Separar cadena en arreglo
    <FunTri: "Sin" | "Cos" | "Tan"> {System.out.println("Token: FunTri. Valor del atributo: " + image);} | // Funciones trigonométricas
    <Trim: "Trim" | "LTrim" |"RTrim"> {System.out.println("Token: Trim. Valor del atributo: " + image);} | // Cortar espacios extras de texto
    <ManArchivo: "Open" | "Close"> {System.out.println("Token: ManArchivo. Valor del atributo: " + image);} | // Abrir o cerrar archivo

    <Switch: "switch"> {System.out.println("Token: Switch.");} | // Declaración de múltiples casos
    <Case: "case"> {System.out.println("Token: Case.");} | // Declaración de caso
    <Comillas: "'"> {System.out.println("Token: Comillas.");} | // Comillas
    <DobleComillas: "\""> {System.out.println("Token: DobleComillas.");} | // Comillas
    <DecCaso: "if"> {System.out.println("Token: DecCaso.");} |
    <ComIni: "/*"> {System.out.println("Token: ComIni.");} |
    <ComFin: "*/"> {System.out.println("Token: ComFin.");} |
    <Comentario: "//"> {System.out.println("Token: Comentario.");} |
    <Arroba: "@"> {System.out.println("Token: Arroba.");} |
    <Gato: "#"> {System.out.println("Token: Gato.");} |
    <Interrogacion: "?"> {System.out.println("Token: Interrogacion.");} |
    <Asig: ":"> {System.out.println("Token: Asig.");} |
    <PuntoComa: ";"> {System.out.println("Token: PuntoComa.");} |
    <Punto: "."> {System.out.println("Token: Punto.");} |
    <Coma: ","> {System.out.println("Token: Coma.");} |
    <ParIni: "("> {System.out.println("Token: ParIni.");} |
    <ParFin: ")"> {System.out.println("Token: ParFin.");} |
    <ArrIni: "["> {System.out.println("Token: ArrIni.");} |
    <ArrFin: "]"> {System.out.println("Token: ArrFin.");} |
    <CorIni: "{"> {System.out.println("Token: CorIni.");} |
    <ConFin: "}"> {System.out.println("Token: ConFin.");} |
    <ContenedorIzq: "<|"> {System.out.println("Token: ContenedorIzq.");} |
    <ContenedorDer: "|>"> {System.out.println("Token: ContenedorDer.");} |
    <Tilde: "~"> {System.out.println("Token: Tilde.");} | // Tile de la ñ
    <Implode: "implode"> {System.out.println("Token: Implode.");} | // Juntar arreglo en cadena
    <Try: "try"> {System.out.println("Token: Try.");} |
    <Catch: "catch"> {System.out.println("Token: Catch.");} |
    <Finally: "finally"> {System.out.println("Token: Finally.");} |
    
    <Absoluto: "abs"> {System.out.println("Token: Absoluto.");} |
    <Abstracto: "abstract"> {System.out.println("Token: Abstracto.");} |
    <Activar: "activate"> {System.out.println("Token: Activar.");} |
    <Alias: "alias"> {System.out.println("Token: Alias.");} |
    <Ascendiente: "ascatn"> {System.out.println("Token: Ascendiente.");} |
    <Ensamblador: "asm"> {System.out.println("Token: Ensamblador.");} |
    <Afirmar: "assert"> {System.out.println("Token: Afirmar.");} |
    <Await: "await"> {System.out.println("Token: Await.");} |
    <Base: "base"> {System.out.println("Token: Base.");} |
    <Call: "call"> {System.out.println("Token: Call.");} |
    <Callable: "callable"> {System.out.println("Token: Callable.");} |
    <Choose: "choose"> {System.out.println("Token: Choose.");} |
    <DecClase: "class"> {System.out.println("Token: Class.");} |
    <DecMain: "main"> {System.out.println("Token: DecMain.");} |
    <Clear: "clear"> {System.out.println("Token: Clear.");} |
    <Clone: "clone"> {System.out.println("Token: Clone.");} |
    <Collection: "collection"> {System.out.println("Token: Collection.");} |
    <Command: "command"> {System.out.println("Token: Command.");} |
    <Compare: "compare"> {System.out.println("Token: Compare.");} |
    <Inmutable: "const" | "static"> {System.out.println("Token: Constante.");} |
    <ConstCast: "const_cast"> {System.out.println("Token: ConstCast.");} |
    <Continuar: "continue"> {System.out.println("Token: Continuar.");} |
    <Dia: "day"> {System.out.println("Token: Dia.");} |
    <Debugger: "debugger"> {System.out.println("Token: Debugger.");} |
    <Declare: "declare"> {System.out.println("Token: Declare.");} |
    <Defined: "defined?"> {System.out.println("Token: Defined.");} |
    <Del: "del"> {System.out.println("Token: Del.");} |
    <Delete: "delete"> {System.out.println("Token: Delete.");} |
    <Die: "die"> {System.out.println("Token: Die.");} |
    <Doevents: "doevents"> {System.out.println("Token: Doevents.");} |
    <Each: "each"> {System.out.println("Token: Each.");} |
    <Echo: "echo"> {System.out.println("Token: Echo.");} |
    <Eof: "eof"> {System.out.println("Token: Eof.");} |
    <Eqv: "eqv"> {System.out.println("Token: Eqv.");} |
    <Erase: "erase"> {System.out.println("Token: Erase.");} |
    <Error: "error"> {System.out.println("Token: Error.");} |
    <Eval: "eval"> {System.out.println("Token: Eval.");} |
    <Except: "except"> {System.out.println("Token: Except.");} |
    <Exec: "exec"> {System.out.println("Token: Exec.");} |
    <Exit: "exit"> {System.out.println("Token: Exit.");} |
    <Explicit: "explicit"> {System.out.println("Token: Explicit.");} |
    <Export: "export"> {System.out.println("Token: Export.");} |
    <Extern: "extern"> {System.out.println("Token: Extern.");} |
    <Fileattr: "fileattr"> {System.out.println("Token: Fileattr.");} |
    <FileCopy: "filecopy"> {System.out.println("Token: FileCopy.");} |
    <Final: "final"> {System.out.println("Token: Final.");} |
    <Fix: "fix"> {System.out.println("Token: Fix.");} |
    <Fn: "fn"> {System.out.println("Token: Fn.");} |
    <Format: "format"> {System.out.println("Token: Format.");} |
    <Freefile: "freefile"> {System.out.println("Token: Freefile.");} |
    <FriendInLine: "friendinline"> {System.out.println("Token: FriendInLine.");} |
    <From: "from"> {System.out.println("Token: From.");} |
    <Get: "get"> {System.out.println("Token: Get.");} |
    <Global: "global"> {System.out.println("Token: Global.");} |
    <Goto: "goto"> {System.out.println("Token: Goto.");} |
    <Import: "import"> {System.out.println("Token: Import.");} |
    <In: "in"> {System.out.println("Token: In.");} |
    <Include_once: "include_once"> {System.out.println("Token: Include_once.");} |
    <InstanceOf: "instanceof"> {System.out.println("Token: InstanceOf.");} |
    <InsteadOf: "insteadof"> {System.out.println("Token: InsteadOf.");} |
    <Interface: "interface"> {System.out.println("Token: Interface.");} |
    <Is: "is"> {System.out.println("Token: Is.");} |
    <Isset: "isset"> {System.out.println("Token: Isset.");} |
    <Lambda: "lambda"> {System.out.println("Token: Lambda.");} |
    <Let: "let"> {System.out.println("Token: Let.");} |
    <List: "list"> {System.out.println("Token: List.");} |
    <Match: "match"> {System.out.println("Token: Match.");} |
    <Module: "module"> {System.out.println("Token: Module.");} |
    <Mutable: "mutable"> {System.out.println("Token: Mutable.");} |
    <NameSpace: "namespace"> {System.out.println("Token: NameSpace.");} |
    <Native: "native"> {System.out.println("Token: Native.");} |
    <New: "new"> {System.out.println("Token: New.");} |
    <Next: "next"> {System.out.println("Token: Next.");} |
    <Operator: "operator"> {System.out.println("Token: Operator.");} |
    <Package: "package"> {System.out.println("Token: Package.");} |
    <Print: "print"> {System.out.println("Token: Print.");} |
    <Raise: "raise"> {System.out.println("Token: Raise.");} |
    <Redo: "redo"> {System.out.println("Token: Redo.");} |
    <Register: "register"> {System.out.println("Token: Register.");} |
    <Reinterpret_cast: "reinterpret_cast"> {System.out.println("Token: Reinterpret_cast.");} |
    <Require: "require"> {System.out.println("Token: Require.");} |
    <Require_Once: "require_once"> {System.out.println("Token: Require_Once.");} |
    <Rescue: "rescue"> {System.out.println("Token: Rescue.");} |
    <Retry: "retry"> {System.out.println("Token: Retry.");} |
    <Return: "return"> {System.out.println("Token: Return.");} |
    <Seek: "seek"> {System.out.println("Token: Seek.");} |
    <Self: "self"> {System.out.println("Token: Self.");} |
    <Set: "set"> {System.out.println("Token: Set.");} |
    <Signed: "signed"> {System.out.println("Token: Signed.");} |
    <SizeOf: "sizeof"> {System.out.println("Token: SizeOf.");} |
    <Static_Cast: "static_cast"> {System.out.println("Token: Static_Cast.");} |
    <Strictfp: "strictfp"> {System.out.println("Token: Strictfp.");} |
    <Struct: "struct"> {System.out.println("Token: Struct.");} |
    <Super: "super"> {System.out.println("Token: Super.");} |
    <Syncronized: "syncronized"> {System.out.println("Token: Syncronized.");} |
    <Tab: "tab"> {System.out.println("Token: Tab.");} |
    <Template: "template"> {System.out.println("Token: Template.");} |
    <Then: "then"> {System.out.println("Token: Then.");} |
    <This: "this"> {System.out.println("Token: This.");} |
    <Throw: "throw"> {System.out.println("Token: Throw.");} |
    <Throws: "throws"> {System.out.println("Token: Throws.");} |
    <Trait: "trait"> {System.out.println("Token: Trait.");} |
    <Tramsent: "tramsent"> {System.out.println("Token: Tramsent.");} |
    <Transient: "transient"> {System.out.println("Token: Transient.");} |
    <TypeDef: "typedef"> {System.out.println("Token: TypeDef.");} |
    <TypeId: "typeid"> {System.out.println("Token: TypeId.");} |
    <TypeName: "typename"> {System.out.println("Token: TypeName.");} |
    <TypeOf: "typeof"> {System.out.println("Token: TypeOf.");} |
    <Undef: "undef"> {System.out.println("Token: Undef.");} |
    <Union: "union"> {System.out.println("Token: Union.");} |
    <Unsigned: "unsigned"> {System.out.println("Token: Unsigned.");} |
    <Use: "use"> {System.out.println("Token: Use.");} |
    <Using: "using"> {System.out.println("Token: Using.");} |
    <Virtual: "virtual"> {System.out.println("Token: Virtual.");} |
    <Vacio: "void"> {System.out.println("Token: Vacio.");} |
    <Volatile: "volatile"> {System.out.println("Token: Volatile.");} |
    <With: "with"> {System.out.println("Token: With.");} |
    <Yield: "yield"> {System.out.println("Token: Yield.");} |
    
    <Identificador: <letra>((<dig>) | (<letra>))*> {
        /*System.out.println("Token: Identificador. Valor del atributo: " + image);
        tabla.add(image);
        Mensaje();
        System.out.println("Token: Identificador (0). Valor del atributo: " + image);*/
    } |
    <Texto: <Comillas> (<letra> | <dig>)* <Comillas>> {System.out.println("Token: Texto. Valor del atributo: " + image);} |
    <Entero: (<dig>)+> {System.out.println("Token: Numero. Valor del atributo: " + image);} |
    <Decimal: (<dig>)+"."(<dig>)+> {System.out.println("Token: Numero. Valor del atributo: " + image);} |

    <Nada: ""> |
    <Clase: <DecObjeto> <ContenedorIzq> (<Propiedad>)+ <ContenedorDer>> {System.out.println("Token: Clase.");} |
    <DecObjeto: (<DecClase> | <TipoDato> | <Vacio>) (<Acceso>)? <Identificador>> {System.out.println("Token: Propiedad.");} |
    <Propiedad: <MetodoEntrada> | <Clase> | (<DecObjeto> (<Variable> | <Funcion>))> {System.out.println("Token: DecObjeto.");} |
    //<Beta: >
    <MetodoEntrada: <DecMain> <Parametro> <CajaInstr>> {System.out.println("Token: MetodoEntrada.");} |
    <Variable: (<Asig> <Valor>)? <PuntoComa>> {System.out.println("Token: Variable.");} |
    <Valor: <Texto> | <Entero> | <Decimal> | <Booleano> | <Nulo>> {System.out.println("Token: Valor.");} |
    <Funcion: <Parametro> <CajaInstr>> {System.out.println("Token: Funcion.");} |
    <Parametro: <ParIni> <TipoDato> <Identificador> (<Coma> <TipoDato> <Identificador>)* <ParFin>> {System.out.println("Token: Parametro.");} |
    <CajaInstr: <ContenedorIzq> (<Instruccion>)+ <ContenedorDer>> {System.out.println("Token: CajaInstr.");} |
    <Instruccion: <LlamadaFun> | <Retorno> | <IncDecVariable>> {System.out.println("Token: Instruccion.");} |
    <LlamadaFun: <Arroba> <Identificador> (<Parametro>)?> {System.out.println("Token: LlamadaFun.");} |
    <Retorno: <Return> (<Valor> | <Identificador>)> {System.out.println("Token: Retorno.");} |
    <IncDecVariable: (((<Entero>)? <IncDec> <Identificador>) | (<Identificador> <IncDec> (<Entero>)?)) <PuntoComa>> {System.out.println("Token: IncDecVariable.");}
}

void Codigo() :
{
    Token t;
    ArrayList<String> tabla;
    tabla = new ArrayList<String>();
}
{
    <Clase>
    /*t = <Identificador> {
        String palabra = t.image;
        int c = 0;

        for (; c < tabla.size(); c++)
            if (palabra.equals(tabla.get(c)))
                break;
        
        if (tabla.size() == c)
            tabla.add(palabra);

        System.out.println("Identificador (" + Integer.toString(c) + "): " + t.image);
    }*/

    <EOF> {
        if (tabla.size() > 0) {
            System.out.println("\nLista de identificadores encontrados");

            for (int i = 0; i < tabla.size(); i++)
                System.out.println("Identificador(" + Integer.toString(i) + ") = " + tabla.get(i));
        }
    }
}

void Iniciar() :
{
    Token t;
    ArrayList<String> tabla;
    tabla = new ArrayList<String>();
}
{
    (t = <Identificador> {
        String palabra = t.image;
        int i = 0;

        for (; i < tabla.size(); i++)
            if (palabra.equals(tabla.get(i)))
                break;
        
        if (tabla.size() == i)
            tabla.add(palabra);

        System.out.println("Identificador (" + Integer.toString(i) + "): " + t.image);
    } |
    <Absoluto> |
    <Abstracto> |
    <Activar> |
    <Alias> |
    <Ascendiente> |
    <Ensamblador> |
    <Afirmar> |
    <Await> |
    <Base> |
    <Call> |
    <Callable> |
    <Choose> |
    <DecClase> |
    <DecMain> |
    <Clear> |
    <Clone> |
    <Collection> |
    <Command> |
    <Compare> |
    <Inmutable> |
    <ConstCast> |
    <ContenedorIzq> |
    <ContenedorDer> |
    <Continuar> |
    <Dia> |
    <Debugger> |
    <Declare> |
    <Defined> |
    <Del> |
    <Delete> |
    <Die> |
    <Doevents> |
    <Each> |
    <Echo> |
    <Eof> |
    <Eqv> |
    <Erase> |
    <Error> |
    <Eval> |
    <Except> |
    <Exec> |
    <Exit> |
    <Explicit> |
    <Export> |
    <Extern> |
    <Fileattr> |
    <FileCopy> |
    <Final> |
    <Fix> |
    <Fn> |
    <Format> |
    <Freefile> |
    <FriendInLine> |
    <From> |
    <Get> |
    <Global> |
    <Goto> |
    <Import> |
    <In> |
    <Include_once> |
    <InstanceOf> |
    <InsteadOf> |
    <Interface> |
    <Is> |
    <Isset> |
    <Lambda> |
    <Let> |
    <List> |
    <Match> |
    <Module> |
    <Mutable> |
    <NameSpace> |
    <Native> |
    <New> |
    <Next> |
    <Operator> |
    <Package> |
    <Print> |
    <Raise> |
    <Redo> |
    <Register> |
    <Reinterpret_cast> |
    <Require> |
    <Require_Once> |
    <Rescue> |
    <Retry> |
    <Return> |
    <Seek> |
    <Self> |
    <Set> |
    <Signed> |
    <SizeOf> |
    <Static_Cast> |
    <Strictfp> |
    <Struct> |
    <Super> |
    <Syncronized> |
    <Tab> |
    <Template> |
    <Then> |
    <This> |
    <Throw> |
    <Throws> |
    <Tilde> |
    <Trait> |
    <Tramsent> |
    <Transient> |
    <TypeDef> |
    <TypeId> |
    <TypeName> |
    <TypeOf> |
    <Undef> |
    <Union> |
    <Unsigned> |
    <Use> |
    <Using> |
    <Virtual> |
    <Vacio> |
    <Volatile> |
    <With> |
    <Yield> |
    
    <TipoDato> |
    <Asig> |
    <Arroba> |
    <Gato> |
    <Interrogacion> |
    <Entero> |
    <PuntoComa> |
    <Punto> |
    <Coma> |
    <OperadorLog> |
    <Ciclo> |
    <DecCaso> |
    <CasoSino> |
    <Switch> |
    <Case> |
    <Default> |
    <ComIni> |
    <Operador> |
    <ParIni> |
    <ParFin> |
    <ArrIni> |
    <ArrFin> |
    <CorIni> |
    <ConFin> |
    <Herencia> |
    <Acceso> |
    <IncDec> |
    <Comillas> |
    <DobleComillas> |
    <Booleano> |
    <Nulo> |
    <Split> |
    <Implode> |
    <FunTri> |
    <Trim> |
    <ManArchivo> |
    <Try> |
    <Catch> |
    <Finally>)+

    <EOF> {
        if (tabla.size() > 0) {
            System.out.println("\nLista de identificadores encontrados");

            for (int i = 0; i < tabla.size(); i++)
                System.out.println("Identificador(" + Integer.toString(i) + ") = " + tabla.get(i));
        }
    }
}
