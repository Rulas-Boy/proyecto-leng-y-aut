PARSER_BEGIN(test)
class test
{
    public static void main(String[] args) throws ParseException
    {
        try
        {
            test analizador = new test(System.in);

            analizador.Iniciar();

            System.out.println("La cadena fue aceptada correctamente");
        }
        catch(ParseException e)
        {
            System.out.println(e.getMessage());

            System.out.println("Hubo un error y la cadena no fue aceptada.");
        }
    }
}
PARSER_END(test)

SKIP :
{ " " | "\t" | "\n" | "\r" }

TOKEN :
{
<#letraunica: ["a"-"z","A"-"Z"]>
|<#dig: ["0"-"9"]>
}

TOKEN :
{
    <Absoluto: "abs"> {System.out.println("Absoluto -> " + image);} |
    <Abstracto: "abstract"> {System.out.println("Abstracto -> " + image);} |
    <Activar: "activate"> {System.out.println("Activar -> " + image);} |
    <Alias: "alias"> {System.out.println("Alias -> " + image);} |
    <Y: "and"> {System.out.println("Y -> " + image);} |
    <Aplicacion: "app"> {System.out.println("Aplicacion -> " + image);} |
    <Arreglo: "array"> {System.out.println("Arreglo -> " + image);} |
    <Ascendiente: "ascatn"> {System.out.println("Ascendiente -> " + image);} |
    <Ensamblador: "asm"> {System.out.println("Ensamblador -> " + image);} |
    <Afirmar: "assert"> {System.out.println("Afirmar -> " + image);}
}

TOKEN :
{
    <Identificador: <letraunica>((<dig>)* | (<letraunica>)*)*> {System.out.println("Identificador -> " + image);}
}

TOKEN:
{
    <Numero: (<dig>)> {System.out.println("Numero -> " + image);}
}

void Iniciar() :
{}
{
    (<Identificador>)+
    <Absoluto> 
    <Abstracto> 
    <Activar> 
    <Alias> 
    <Y> 
    <Aplicacion> 
    <Arreglo> 
    <Ascendiente> 
    <Ensamblador> 
    <Afirmar>
    <EOF>
}
