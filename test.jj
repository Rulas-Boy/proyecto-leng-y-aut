PARSER_BEGIN(test)
class test
{
    public static void main(String[] args) throws ParseException
    {
        try
        {
            test analizador = new test(System.in);

            analizador.Iniciar();

            System.out.println("La cadena fue aceptada correctamente");
        }
        catch(ParseException e)
        {
            System.out.println(e.getMessage());

            System.out.println("Hubo un error y la cadena no fue aceptada.");
        }
    }
}
PARSER_END(test)

SKIP :
{ " " | "\t" | "\n" | "\r" }

TOKEN :
{
    <#letraunica: ["a"-"z","A"-"Z"]> |
    <#dig: ["0"-"9"]>
}

TOKEN:
{
    <TipoDato: "bool" | "byte" | "char" | "int" | "double" | "float" | "string" | "var"> |
    
    <Asig: "="> |
    
    <OperadorLog: "and" | "&&" | "||" | "or" | "xor" | "<=" | ">=" | "==" | "!=" | "not"> |

    <Ciclo: "for" | "foreach" | "while" | "do" | "until"> |
    
    <DecCaso: "if" | "elseif" | "elsif" | "elif" | "unless"> | // Declaracion de caso
    
    <Switch: "switch"> | // Declaración de múltiples casos
    
    <Case: "case"> | // Declaración de caso

    <Default: "default" | "else"> | // En caso de que no se cumpla una condición
    
    <ComIni: "/*"> | "*/" | "//"> | // Comentarios
    
    <Operador: "+"> | "-" | "*" | "/" | "**" | "%"> | // Operaciones aritméticas

    <ParIni: "("> |
    <ParFin: ")"> |
    
    <ArrIni: "["> |
    <ArrFin: "]"> |
    
    <CorIni: "{"> |
    <ConFin: "}"> |
    
    <Herencia: "extends" | "implements">
    
    <Privcidad: "public" | <Privado: "private" | "protected"> // Privcidad de variables
    
    <IncDec: "++" | "--"> // Incremento o decremento de valor
    
    <Comis: "\"" | "'"> // Comillas
    
    <Booleano: "true" | "false">
    
    <Nulo: "NULL" | "null" | "nil">
    
    <Split: "split" | "explode"> // Separar cadena en arreglo
    <Implode: "implode"> // Juntar arreglo en cadena
    
    <FunTri: "Sin" | "Cos" | "Tan"> // Funciones trigonométricas
    
    <Trim: "Trim" | "LTrim" |"RTrim"> // Cortar espacios extras de texto
    
    <ManArchivo: "Open" | "Close"> // Abrir o cerrar archivo
    
    <Identificador: <letraunica>((<dig>)* | (<letraunica>)*)*> {System.out.println("Identificador -> " + image);}
    
    <Numero: (<dig>)> {System.out.println("Numero -> " + image);}
    
    <Absoluto: "abs"> {System.out.println("Absoluto -> " + image);} |
    <Abstracto: "abstract"> {System.out.println("Abstracto -> " + image);} |
    <Activar: "activate"> {System.out.println("Activar -> " + image);} |
    <Alias: "alias"> {System.out.println("Alias -> " + image);} |
    <Y: "and"> {System.out.println("Y -> " + image);} |
    <Aplicacion: "app"> {System.out.println("Aplicacion -> " + image);} |
    <Arreglo: "array"> {System.out.println("Arreglo -> " + image);} |
    <Ascendiente: "ascatn"> {System.out.println("Ascendiente -> " + image);} |
    <Ensamblador: "asm"> {System.out.println("Ensamblador -> " + image);} |
    <Afirmar: "assert"> {System.out.println("Afirmar -> " + image);}
}

void Iniciar() :
{}
{
    (<Identificador>)+
    <Absoluto> 
    <Abstracto> 
    <Activar> 
    <Alias> 
    <Y> 
    <Aplicacion> 
    <Arreglo> 
    <Ascendiente> 
    <Ensamblador> 
    <Afirmar>
    <EOF>
}
