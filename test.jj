PARSER_BEGIN(test)
import java.io.PrintStream;
import java.util.ArrayList;

class test
{
    public static void main(String[] args) throws ParseException
    {
        ArrayList<String> tabla;
        tabla = new ArrayList<String>();

        try
        {
            test analizador = new test(System.in);

            //analizador.Iniciar();
            analizador.Codigo();

            System.out.println("\nLa cadena fue aceptada correctamente");
        }
        catch(ParseException e)
        {
            System.out.println(e.getMessage());

            System.out.println("Hubo un error y la cadena no fue aceptada.");
        }
    }

    public static void Mensaje()
    {
        System.out.println("MENSAJE MENSAJE MENSAJE MENSAJE");
    }
}
PARSER_END(test)

SKIP : { " " | "\t" | "\n" | "\r" }

TOKEN :
{
    <#letra: ["a"-"z","A"-"Z"]> |
    <#dig: ["0"-"9"]>
}

TOKEN:
{
    <TipoDato: "bool" | "byte" | "char" | "int" | "double" | "float" | "string" | "var"> {System.out.println("Token: TipoDato. Valor del atributo: " + image);} |
    <OperadorLog: "and" | "&&" | "||" | "or" | "xor" | "<=" | "<" | ">=" | ">" | "==" | "!=" | "not"> {System.out.println("Token: OperadorLog. Valor del atributo: " + image);} |
    <ElseIf: "elseif" | "elsif" | "elif" | "unless"> {System.out.println("Token: ElseIf. Valor del atributo: " + image);} | // Declaracion de caso
    <Default: "default" | "else"> {System.out.println("Token: Default. Valor del atributo: " + image);} | // En caso de que no se cumpla una condición
    <Operador: "+" | "-" | "*" | "/" | "**" | "%"> {System.out.println("Token: Operador. Valor del atributo: " + image);} | // Operaciones aritméticas
    <Herencia: "extends" | "implements"> {System.out.println("Token: Herencia. Valor del atributo: " + image);} |
    <Acceso: "public" | "private" | "protected"> {System.out.println("Token: Acceso. Valor del atributo: " + image);} | // Acceso de variables
    <IncDec: "++" | "--"> {System.out.println("Token: IncDec. Valor del atributo: " + image);} | // Incremento o decremento de valor
    <Booleano: "true" | "false"> {System.out.println("Token: Booleano. Valor del atributo: " + image);} |
    <Nulo: "NULL" | "null" | "nil"> {System.out.println("Token: Nulo. Valor del atributo: " + image);} |
    <Split: "split" | "explode"> {System.out.println("Token: Split. Valor del atributo: " + image);} | // Separar cadena en arreglo
    <FunTri: "Sin" | "Cos" | "Tan"> {System.out.println("Token: FunTri. Valor del atributo: " + image);} | // Funciones trigonométricas
    <Trim: "Trim" | "LTrim" |"RTrim"> {System.out.println("Token: Trim. Valor del atributo: " + image);} | // Cortar espacios extras de texto
    <ManArchivo: "Open" | "Close"> {System.out.println("Token: ManArchivo. Valor del atributo: " + image);} | // Abrir o cerrar archivo

    <Switch: "switch"> {System.out.println("Token: Switch.");} | // Declaración de múltiples casos
    <Case: "case"> {System.out.println("Token: Case.");} | // Declaración de caso
    <Comilla: "'"> {System.out.println("Token: Comilla.");} | // Comilla
    <DobleComilla: "\""> {System.out.println("Token: DobleComilla.");} | // Comillas
    <If: "if"> {System.out.println("Token: If.");} |
    <ComIni: "/*"> {System.out.println("Token: ComIni.");} |
    <ComFin: "*/"> {System.out.println("Token: ComFin.");} |
    <Comentario: "//"> {System.out.println("Token: Comentario.");} |
    <Arroba: "@"> {System.out.println("Token: Arroba.");} |
    <Gato: "#"> {System.out.println("Token: Gato.");} |
    <Interrogacion: "?"> {System.out.println("Token: Interrogacion.");} |
    <Asig: ":"> {System.out.println("Token: Asig.");} |
    <PuntoComa: ";"> {System.out.println("Token: PuntoComa.");} |
    <Punto: "."> {System.out.println("Token: Punto.");} |
    <Coma: ","> {System.out.println("Token: Coma.");} |
    <ParIni: "("> {System.out.println("Token: ParIni.");} |
    <ParFin: ")"> {System.out.println("Token: ParFin.");} |
    <CorIni: "["> {System.out.println("Token: CorIni.");} |
    <CorFin: "]"> {System.out.println("Token: CorFin.");} |
    <LlaIni: "{"> {System.out.println("Token: LlaIni.");} |
    <LlaFin: "}"> {System.out.println("Token: LlaFin.");} |
    <ContenedorIzq: "<|"> {System.out.println("Token: ContenedorIzq.");} |
    <ContenedorDer: "|>"> {System.out.println("Token: ContenedorDer.");} |
    <Tilde: "~"> {System.out.println("Token: Tilde.");} | // Tile de la ñ
    <Implode: "implode"> {System.out.println("Token: Implode.");} | // Juntar arreglo en cadena
    <Try: "try"> {System.out.println("Token: Try.");} |
    <Catch: "catch"> {System.out.println("Token: Catch.");} |
    <Finally: "finally"> {System.out.println("Token: Finally.");} |
    <For: "for"> {System.out.println("Token: For.");} |
    <Foreach: "foreach"> {System.out.println("Token: Foreach.");} |
    <While: "while"> {System.out.println("Token: While.");} |
    <Do: "do"> {System.out.println("Token: Do.");} |
    <Until: "until"> {System.out.println("Token: Until.");} |
    
    <Absoluto: "abs"> {System.out.println("Token: Absoluto.");} |
    <Abstracto: "abstract"> {System.out.println("Token: Abstracto.");} |
    <Activar: "activate"> {System.out.println("Token: Activar.");} |
    <Alias: "alias"> {System.out.println("Token: Alias.");} |
    <Ascendiente: "ascatn"> {System.out.println("Token: Ascendiente.");} |
    <Ensamblador: "asm"> {System.out.println("Token: Ensamblador.");} |
    <Afirmar: "assert"> {System.out.println("Token: Afirmar.");} |
    <Await: "await"> {System.out.println("Token: Await.");} |
    <Base: "base"> {System.out.println("Token: Base.");} |
    <Break: "break"> {System.out.println("Token: Break.");} |
    <Call: "call"> {System.out.println("Token: Call.");} |
    <Callable: "callable"> {System.out.println("Token: Callable.");} |
    <Choose: "choose"> {System.out.println("Token: Choose.");} |
    <DecClase: "class"> {System.out.println("Token: DecClase.");} |
    <DecMain: "main"> {System.out.println("Token: DecMain.");} |
    <Clear: "clear"> {System.out.println("Token: Clear.");} |
    <Clone: "clone"> {System.out.println("Token: Clone.");} |
    <Collection: "collection"> {System.out.println("Token: Collection.");} |
    <Command: "command"> {System.out.println("Token: Command.");} |
    <Compare: "compare"> {System.out.println("Token: Compare.");} |
    <Inmutable: "const" | "static"> {System.out.println("Token: Constante.");} |
    <ConstCast: "const_cast"> {System.out.println("Token: ConstCast.");} |
    <Continuar: "continue"> {System.out.println("Token: Continuar.");} |
    <Date: "Date"> {System.out.println("Token: Date.");} |
    <Dia: "day"> {System.out.println("Token: Dia.");} |
    <Debugger: "debugger"> {System.out.println("Token: Debugger.");} |
    <Declare: "declare"> {System.out.println("Token: Declare.");} |
    <Defined: "defined?"> {System.out.println("Token: Defined.");} |
    <Del: "del"> {System.out.println("Token: Del.");} |
    <Delete: "delete"> {System.out.println("Token: Delete.");} |
    <Die: "die"> {System.out.println("Token: Die.");} |
    <Doevents: "doevents"> {System.out.println("Token: Doevents.");} |
    <Each: "each"> {System.out.println("Token: Each.");} |
    <Echo: "echo"> {System.out.println("Token: Echo.");} |
    <Eof: "eof"> {System.out.println("Token: Eof.");} |
    <Eqv: "eqv"> {System.out.println("Token: Eqv.");} |
    <Erase: "erase"> {System.out.println("Token: Erase.");} |
    <Error: "error"> {System.out.println("Token: Error.");} |
    <Eval: "eval"> {System.out.println("Token: Eval.");} |
    <Except: "except"> {System.out.println("Token: Except.");} |
    <Exec: "exec"> {System.out.println("Token: Exec.");} |
    <Exit: "exit"> {System.out.println("Token: Exit.");} |
    <Explicit: "explicit"> {System.out.println("Token: Explicit.");} |
    <Export: "export"> {System.out.println("Token: Export.");} |
    <Extern: "extern"> {System.out.println("Token: Extern.");} |
    <Fileattr: "fileattr"> {System.out.println("Token: Fileattr.");} |
    <FileCopy: "filecopy"> {System.out.println("Token: FileCopy.");} |
    <Final: "final"> {System.out.println("Token: Final.");} |
    <Fix: "fix"> {System.out.println("Token: Fix.");} |
    <Fn: "fn"> {System.out.println("Token: Fn.");} |
    <Format: "format"> {System.out.println("Token: Format.");} |
    <Freefile: "freefile"> {System.out.println("Token: Freefile.");} |
    <FriendInLine: "friendinline"> {System.out.println("Token: FriendInLine.");} |
    <From: "from"> {System.out.println("Token: From.");} |
    <Get: "get"> {System.out.println("Token: Get.");} |
    <Global: "global"> {System.out.println("Token: Global.");} |
    <Goto: "goto"> {System.out.println("Token: Goto.");} |
    <Import: "import"> {System.out.println("Token: Import.");} |
    <In: "in"> {System.out.println("Token: In.");} |
    <Include_once: "include_once"> {System.out.println("Token: Include_once.");} |
    <InstanceOf: "instanceof"> {System.out.println("Token: InstanceOf.");} |
    <InsteadOf: "insteadof"> {System.out.println("Token: InsteadOf.");} |
    <Interface: "interface"> {System.out.println("Token: Interface.");} |
    <Is: "is"> {System.out.println("Token: Is.");} |
    <Isset: "isset"> {System.out.println("Token: Isset.");} |
    <Lambda: "lambda"> {System.out.println("Token: Lambda.");} |
    <Let: "let"> {System.out.println("Token: Let.");} |
    <List: "list"> {System.out.println("Token: List.");} |
    <Match: "match"> {System.out.println("Token: Match.");} |
    <Module: "module"> {System.out.println("Token: Module.");} |
    <Mutable: "mutable"> {System.out.println("Token: Mutable.");} |
    <NameSpace: "namespace"> {System.out.println("Token: NameSpace.");} |
    <Native: "native"> {System.out.println("Token: Native.");} |
    <New: "new"> {System.out.println("Token: New.");} |
    <Next: "next"> {System.out.println("Token: Next.");} |
    <Operator: "operator"> {System.out.println("Token: Operator.");} |
    <Package: "package"> {System.out.println("Token: Package.");} |
    <Print: "print"> {System.out.println("Token: Print.");} |
    <Raise: "raise"> {System.out.println("Token: Raise.");} |
    <Redo: "redo"> {System.out.println("Token: Redo.");} |
    <Register: "register"> {System.out.println("Token: Register.");} |
    <Reinterpret_cast: "reinterpret_cast"> {System.out.println("Token: Reinterpret_cast.");} |
    <Require: "require"> {System.out.println("Token: Require.");} |
    <Require_Once: "require_once"> {System.out.println("Token: Require_Once.");} |
    <Rescue: "rescue"> {System.out.println("Token: Rescue.");} |
    <Retry: "retry"> {System.out.println("Token: Retry.");} |
    <Return: "return"> {System.out.println("Token: Return.");} |
    <Seek: "seek"> {System.out.println("Token: Seek.");} |
    <Self: "self"> {System.out.println("Token: Self.");} |
    <Set: "set"> {System.out.println("Token: Set.");} |
    <Signed: "signed"> {System.out.println("Token: Signed.");} |
    <SizeOf: "sizeof"> {System.out.println("Token: SizeOf.");} |
    <Static_Cast: "static_cast"> {System.out.println("Token: Static_Cast.");} |
    <Strictfp: "strictfp"> {System.out.println("Token: Strictfp.");} |
    <Struct: "struct"> {System.out.println("Token: Struct.");} |
    <Super: "super"> {System.out.println("Token: Super.");} |
    <Syncronized: "syncronized"> {System.out.println("Token: Syncronized.");} |
    <Math: "Math"> {System.out.println("Token: Math.");} |
    <Tab: "tab"> {System.out.println("Token: Tab.");} |
    <Template: "template"> {System.out.println("Token: Template.");} |
    <Then: "then"> {System.out.println("Token: Then.");} |
    <This: "this"> {System.out.println("Token: This.");} |
    <Throw: "throw"> {System.out.println("Token: Throw.");} |
    <Throws: "throws"> {System.out.println("Token: Throws.");} |
    <Trait: "trait"> {System.out.println("Token: Trait.");} |
    <Tramsent: "tramsent"> {System.out.println("Token: Tramsent.");} |
    <Transient: "transient"> {System.out.println("Token: Transient.");} |
    <TypeDef: "typedef"> {System.out.println("Token: TypeDef.");} |
    <TypeId: "typeid"> {System.out.println("Token: TypeId.");} |
    <TypeName: "typename"> {System.out.println("Token: TypeName.");} |
    <TypeOf: "typeof"> {System.out.println("Token: TypeOf.");} |
    <Undef: "undef"> {System.out.println("Token: Undef.");} |
    <Union: "union"> {System.out.println("Token: Union.");} |
    <Unsigned: "unsigned"> {System.out.println("Token: Unsigned.");} |
    <Use: "use"> {System.out.println("Token: Use.");} |
    <Using: "using"> {System.out.println("Token: Using.");} |
    <Virtual: "virtual"> {System.out.println("Token: Virtual.");} |
    <Vacio: "void"> {System.out.println("Token: Vacio.");} |
    <Volatile: "volatile"> {System.out.println("Token: Volatile.");} |
    <With: "with"> {System.out.println("Token: With.");} |
    <Yield: "yield"> {System.out.println("Token: Yield.");} |
    
    <Identificador: <letra>((<dig>) | (<letra>))*> |
    <Texto: <DobleComilla> (<letra> | <dig>)* <DobleComilla>> {System.out.println("Token: Texto. Valor del atributo: " + image);} |
    <Caracter: <Comilla> (<letra> | <dig>) <Comilla>> {System.out.println("Token: Texto. Valor del atributo: " + image);} |
    <Entero: (<dig>)+> {System.out.println("Token: Numero. Valor del atributo: " + image);} |
    <Decimal: (<dig>)+"."(<dig>)+> {System.out.println("Token: Numero. Valor del atributo: " + image);}

    /*<Nada: "">*/
}

void Programa():
{}
{
    (Importes())* MetodoEntrada() (Clase() | Funcion() | Estructura())*
}

void Estructura():
{}
{
    <Struct> <Identificador> <ContenedorIzq> (Propiedad())+ <ContenedorDer>
}

void Funcion():
{}
{
    (Parametro())? CajaInstr()
}

void MetodoEntrada():
{}
{
    <DecMain> Parametro() CajaInstr()
}

void Parametro():
{}
{
    <ParIni> <TipoDato> (<CorIni> <CorFin>)? <Identificador> (<Coma> <TipoDato> <Identificador>)* <ParFin>
}

void CajaInstr():
{}
{
    <ContenedorIzq> (Instruccion() | TryCatch() | SentenciaIf() | SwitchCase() | Ciclo())+ <ContenedorDer>
}

void SentenciaIf():
{}
{
    <If> Condicion() CajaInstr() (<ElseIf> Condicion() CajaInstr())* (<Default> CajaInstr())?
}

void SwitchCase():
{}
{
    <Switch> <ParIni> UsoVariableValor() <ParFin> <ContenedorIzq> (<Case> CaseBody())+ (<Default> CaseBody())? <ContenedorDer>
}

void CaseBody():
{}
{
    (Valor())? <Gato> (Instruccion())*
}

void Instruccion():
{}
{
    (InicioID() | LlamadaFun() | Retorno() | PreIncDecVariable() | InstanciaObj() | DecObjeto_Arreglo() | <Break>) <PuntoComa>
}

void InicioID():
{}
{
    <Identificador> (AsignacionValor() | PostIncDecVariable() | LlamadaPropiedad())
}

void AsignacionValor():
{}
{
    <Asig> (UsoVariableValor() | LlamadaFun() | OpAritmetica())
}

void OpAritmetica():
{}
{
    <Operador> (Valor() | AsigCondicional() | <Identificador>)
}

void PostIncDecVariable():
{}
{
    <IncDec> (<Entero>)?
}

void LlamadaPropiedad():
{}
{
    (<Punto> (<Identificador> | LlamadaFun()))*
}

void PreIncDecVariable():
{}
{
    (<Entero>)? <IncDec> <Identificador>
}

void InstanciaObj():
{}
{
    <Tilde> <Identificador> <Identificador>
}

void Retorno():
{}
{
    <Return> UsoVariableValor()
}

void UsoVariableValor():
{}
{
    <Identificador> (PosArr())? (<Punto> LlamadaFun())? | AsigArreglo() | Valor() | AsigCondicional()
}

void AsigArreglo():
{}
{
    <LlaIni> Valor() (<Coma> Valor())* <LlaFin>
}

void PosArr():
{}
{
    <CorIni> <Entero> <CorFin>
}

void LlamadaFun():
{}
{
    (Librerias())? <Arroba> (<Identificador> | Metodos()) (ParametroEntrada())? 
}

void Librerias():
{}
{
    (<Math> | <Date>) <Punto>
}

void Metodos():
{}
{
    <SizeOf> | <Echo> | <Trim> | <Split> | <Isset> | <Clear> | <Absoluto>
}

void ParametroEntrada():
{}
{
    <ParIni> (Valor() | <TipoDato> | (<Identificador> (PosArr())?)) <ParFin>
}

void AsigCondicional():
{}
{
    Condicion() <Interrogacion> UsoVariableValor() <Gato> UsoVariableValor()
}

void TryCatch():
{}
{
    <Try> CajaInstr() (<Catch> Parametro() CajaInstr())+ (<Finally> CajaInstr())?
}

void Condicion():
{}
{
    <ParIni> UsoVariableValor() (<OperadorLog> UsoVariableValor())* <ParFin>
}

void Importes():
{}
{
    <Import> <Identificador> (<Punto> (<Math> | <Date>))* <PuntoComa>
}

void Clase():
{}
{
    <DecClase> (DecAcceso())? <Identificador> <ContenedorIzq> (Propiedad())+ <ContenedorDer>
}

void Propiedad():
{}
{
    Valor()
}

void DecObjeto_Arreglo():
{}
{
    <TipoDato> (ContenedorCorIni())? <Identificador>
}

void ContenedorCorIni():
{}
{
    <CorIni> (DecArreglo() | DecAcceso())
}

void DecObjValor():
{}
{
    (DecAcceso())? <Identificador>
}

void DecArreglo():
{}
{
    <CorFin> (DecAcceso())?
}

void DecAcceso():
{}
{
    <Acceso> <CorFin>
}

void Valor():
{}
{
    <Texto> | <Caracter> | <Entero> | <Decimal> | <Booleano> | <Nulo>
}

void Ciclo(): 
{}
{
    CicloFor() | CicloForeach() | CicloWhile() | CicloDoWhile()
}

void CicloFor():
{}
{
    <For> <ParIni> ForInicializador() <PuntoComa> Condicion() <PuntoComa> (InicioID() | PreIncDecVariable()) <ParFin> CajaInstr()
}

void ForInicializador():
{}
{
    (DecObjeto_Arreglo())? (AsignacionValor())?
}

void ForIncremento():
{}
{
    PostIncDecVariable() | AsignacionValor()
}

void CicloForeach():
{}
{
    <Foreach> <ParIni> ForInicializador() <In> <Identificador> <ParFin> CajaInstr()
}

void CicloWhile():
{}
{
    ContWhile() CajaInstr()
}

void CicloDoWhile():
{}
{
    <Do> CajaInstr() ContWhile() <PuntoComa>
}

void ContWhile():
{}
{
    <While> Condicion()
}

void Codigo():
{
    Token t;
    ArrayList<String> tabla;
    tabla = new ArrayList<String>();
}
{
    Programa()
    /*(t = <Identificador> {
        String palabra = t.image;
        int i = 0;

        for (; i < tabla.size(); i++)
            if (palabra.equals(tabla.get(i)))
                break;
        
        if (tabla.size() == i)
            tabla.add(palabra);

        System.out.println("Identificador (" + Integer.toString(i) + "): " + t.image);
    }*/

    <EOF> {
        if (tabla.size() > 0) {
            System.out.println("\nLista de identificadores encontrados");

            for (int i = 0; i < tabla.size(); i++)
                System.out.println("Identificador(" + Integer.toString(i) + ") = " + tabla.get(i));
        }
    }
}